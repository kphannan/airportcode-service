

buildscript {
    ext {
        // --- Languages / framworks
        lombokVersion              = '1.18.22'
        apacheLangVersion          = '3.12.0'
        hibernateValidatorVersion  = '7.0.2.Final'
        jacksonVersion             = '2.10.1'

        // --- Testing ---
        // --- unit testing
        junitVersion               = '5.8.2'
        hamcrestVersion            = '2.2'
        serenityVersion            = '2.0.83'
        cucumberReportsVersion     = '4.11.2'


        // ===== Quality checks =====
        // --- Coding practies (static analysis) ---
        // --- Coding style
        checkstyleVersion          = '9.0.1'
        // --- Common Coding flaws
        pmdVersion                 = '6.41.0'

        // --- Testing ---
        // Unit testing
        junitVersion               = '5.8.2'
        // --- Code coverage
        pitVersion                 = '1.7.3'
        // --- BDD
        karateVersion              = '1.1.0'


        // --- Documentation ---
        asciiDoctorVersion         = '1.5.6'
    }

    repositories {
        mavenLocal()
    }

    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:${serenityVersion}")
        classpath 'be.jlr-home.gradle:plantumlPlugin:0.1.+'
    }
}


plugins {
    // --- Artifact
    id 'java'

    // --- annotation processors
    // id "io.freefair.lombok" version "6.3.0"
    // id "io.freefair.lombok"

    // ===== Frameworks =====
    // --- Spring boot
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'


    // ===== Quality Assurance =====
    // --- Static Analysis
    // --- PMD
    id 'pmd'
    // --- Style
    id 'checkstyle'
    // --- Coverage
    id 'jacoco'
    // --- Mutation testing
    // id 'info.solidsoft.pitest' version '1.7.0'
    // id 'info.solidsoft.pitest'


    // ===== Configuration Management =====
    // id "net.nemerosa.versioning" version "2.9.0"
    // id "com.gorylenko.gradle-git-properties" version "2.3.2"
    // id 'maven-publish'

    // ===== Documentation =====
    // id 'org.asciidoctor.convert' version '1.5.8'
    // id 'org.asciidoctor.convert'

    id 'project-report'
    id 'build-dashboard'
    // id 'net.serenity-bdd.aggregator' version "${serenityVersion}"
}


// plugins {
// 	id 'org.springframework.boot' version '2.2.5.RELEASE'
// 	// id 'org.springframework.boot' version '2.2.2.BUILD-SNAPSHOT'
// 	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
// 	id 'org.asciidoctor.convert' version '1.5.8'
// 	id 'java'
//     id 'jacoco'
//     // id 'checkstyle'
//     id 'project-report'
//     id 'build-dashboard'
//     // id 'net.serenity-bdd.aggregator' version "${serenityVersion}"
//     // id "net.nemerosa.versioning" version "2.9.0"
//     // id "net.nemerosa.versioning"
//     // id "com.gorylenko.gradle-git-properties" version "2.2.0"
// 	// id 'org.liquibase.gradle' version '2.0.0'
// }

// apply plugin: 'spring-cloud-contract'
// apply plugin: 'net.serenity-bdd.aggregator'


group = 'com.airline'
version = '0.0.2-SNAPSHOT'
// sourceCompatibility = '1.8'
sourceCompatibility = 17
targetCompatibility = "${sourceCompatibility}"

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}

    integrationTestImplementation.extendsFrom testImplementation
}
// configurations {
//     // integrationTest.extendsFrom testImplementation
//     integrationTestImplementation.extendsFrom testImplementation
//     // integrationTestCompile.extendsFrom testCompile
//     // integrationTestRuntime.extendsFrom testRuntime
// }

repositories {
	jcenter()
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	// set('snippetsDir', file("build/generated-snippets"))
	// set('springCloudVersion', "Hoxton.BUILD-SNAPSHOT")
	// set('springCloudVersion', "Hoxton.SR3")
    set( 'springCloudVersion', "2021.0.0" )
}

def changeLog = "$projectDir/src/main/resources/db/changelog/db.changelog-master.yaml"

// liquibase {
//     activities {
//         main {
//             changeLogFile changeLog
//             url 'jdbc:mysql://127.0.0.1:8889/railcar?serverTimezone=UTC'
//             username 'railcaradmin'
//             password 'railcaradmin'
//             outputFile 'dbchangelog.txt'
//         }
//     }
// }


dependencies {
    implementation project( ":airline-core" )



    // ===== Frameworks =====
    // --- Spring boot
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'

    // --- Traceability
    // --- Instrumentation
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'


    // ===== Persistence =====
    // implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'
    // --- Database
    runtimeOnly 'com.h2database:h2'
    // runtimeOnly 'org.postgresql:postgresql'

    // ===== partner services =====

    // --- Stability
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // --- REST
    // --- SOAP
    // --- Metrics


    // ===== Language Support =====
    // --- Lombok
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    // --- Validation
    implementation 'org.hibernate.validator:hibernate-validator:7.0.2.Final'



    // ===== Quality Assurance =====
    // --- Static Analysis
    // --- PMD
    // --- Style
    implementation( "com.puppycrawl.tools:checkstyle:${checkstyleVersion}" )
    // --- Unit testing
    testImplementation( "org.junit.jupiter:junit-jupiter-api:${junitVersion}" )
    testRuntimeOnly( "org.junit.jupiter:junit-jupiter-engine:${junitVersion}" )
    testImplementation( "org.hamcrest:hamcrest:${hamcrestVersion}" )
    // --- Coverage
    // --- Mutation testing
    testRuntimeOnly( 'org.pitest:pitest-junit5-plugin:0.15' )
    // --- BDD
    testImplementation( "com.intuit.karate:karate-junit5:${karateVersion}" )
    // --- Reporting
    // testImplementation( "net.serenity-bdd:serenity-core:${serenityVersion}" )
    // testImplementation( "net.serenity-bdd:serenity-junit:${serenityVersion}" )
    testImplementation( "net.masterthought:cucumber-reporting:${cucumberReportsVersion}" )

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}


// dependencies {

//     // ----- Libraries that are not in a repository -----
// 	implementation project( ":airline-core" )
//     // implementation( 'com.airport:airline-core:0.0.1-SNAPSHOT' )

//     // This dependency is used internally, and not exposed to consumers on their own compile classpath.
//     implementation 'com.google.guava:guava:28.0-jre'


//     compileOnly("org.projectlombok:lombok:${lombokVersion}")
//     testImplementation("org.projectlombok:lombok:${lombokVersion}")
//     annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
//     testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

//     // testImplementation("net.serenity-bdd:serenity-core:${serenityVersion}" )
//     // testImplementation("net.serenity-bdd:serenity-junit:${serenityVersion}" )

//     // ----- Dependencies -----
//     //   --- Spring ---
// 	implementation 'org.springframework.boot:spring-boot-starter-actuator'
// 	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
// 	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
// 	// implementation 'org.springframework.boot:spring-boot-starter-hateoas'
// 	implementation 'org.springframework.boot:spring-boot-starter-web'

// 	implementation 'org.springframework.cloud:spring-cloud-starter'
// 	implementation 'org.springframework.cloud:spring-cloud-starter-config'
// 	// implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
// 	// implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
// 	// implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard'
// 	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
// 	// implementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul'
// 	// implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
// 	// implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
// 	// implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
// 	// implementation 'org.springframework.data:spring-data-rest-hal-browser'


// 	developmentOnly 'org.springframework.boot:spring-boot-devtools'

//     //   --- Database change management ---
// 	implementation 'org.liquibase:liquibase-core'

//     //   --- Enable auditing of DB content
//     // implementation( "org.hibernate:hibernate-envers:${hibernate.version}5.3.1.Final" )

//     //   --- Metrics instrumentation
// 	// Performance instrumentation
// 	// https://mvnrepository.com/artifact/io.micrometer/micrometer-core
// 	// implementation( "io.micrometer:micrometer-core:${micrometerVersion}" )
// 	// https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-prometheus
// 	// implementation( "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}" )
// 	// implementation( "io.micrometer:micrometer-registry-jmx:${micrometerVersion}" )




// 	// runtimeOnly 'mysql:mysql-connector-java'
//     // Database
//     // implementation 'mysql:mysql-connector-java'
// 	runtimeOnly 'com.h2database:h2'

//     // ----- Unit Testing -----
//     // Use JUnit Jupiter API for testing.
//     testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")

//     // Use JUnit Jupiter Engine for testing.
//     testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

//     // testImplementation( "org.mockito:mockito-core:${mockitoVersion}")

//     // https://mvnrepository.com/artifact/org.hamcrest/hamcrest
//     testImplementation("org.hamcrest:hamcrest:${hamcrestVersion}")
//     // testImplementation( "org.assertj:assertj-core:${assertJVersion}")

//     testImplementation( "com.intuit.karate:karate-junit5:${karateVersion}" )
//     testImplementation( "com.intuit.karate:karate-apache:${karateVersion}" )
// 	testImplementation('org.springframework.boot:spring-boot-starter-test') {
// 		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
// 	}
// 	// testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
// }

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// contracts {
// 	targetFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
// }

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


processResources {
	filesMatching('application.properties') {
    	expand(project.properties)
	}
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }

    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        resources {
            srcDir file('src/integrationTest/features')
            exclude '**/*.java'
        }
    }
}



test {
	// outputs.dir snippetsDir
    // Use junit platform for unit tests
	useJUnitPlatform()


    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}



task integrationTest(type: Test) {
    group 'Verification'
    description 'runs the integration tests with Cucumber/Selenium/Karate'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath       = sourceSets.integrationTest.runtimeClasspath

    mustRunAfter test
	useJUnitPlatform()

    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}


// integrationTest {
// 	useJUnitPlatform()
//     // pull karate options into the runtime
//     systemProperty "karate.options", System.properties.getProperty("karate.options")
//     // pull karate env into the runtime
//     systemProperty "karate.env", System.properties.getProperty("karate.env")
//     // ensure tests are always run
//     outputs.upToDateWhen { false }
// }

// asciidoctor {
// 	inputs.dir snippetsDir
// 	dependsOn test
// }




// ===== Static Code Analysis =====
// --- Coverage (Jacoco) ---
// See this page for options https://reflectoring.io/jacoco/
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 0.75
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}


// ----- Checkstyle -----
checkstyle {
    showViolations = false
    toolVersion = "${checkstyleVersion}"
    // checkstyle.xml copy from:
    // https://raw.githubusercontent.com/checkstyle/checkstyle/checkstyle-8.6/src/main/resources/google_checks.xml
    // the version should be as same as plugin version
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
    // source = 'src/${sourceSet.name}/${sourceSet.name.name}'
    // sourceSets = [sourceSets.main.srcDirs]
}

checkstyleTest {
    source = 'src/test/java'
    // source = 'src/${sourceSet.name}/java'
    // source = '${sourceSet.name.java.srcDir}'
}


// ----- PMD -----
pmd {
    consoleOutput = false
    ignoreFailures = true       // Don't interrupt the build
    toolVersion = "${pmdVersion}"
    ruleSetFiles = files("${rootDir}/config/pmd/pmd.xml")
    ruleSets = []
}

// --- Mutation Tests
// pitest {
//     verbose = false
//     testSourceSets = [sourceSets.test]
//     mainSourceSets = [sourceSets.main]
//     // targetClasses = ['com.example.security.*']  //by default "${project.group}.*"
//     pitestVersion = "${pitVersion}" //not needed when a default PIT version should be used
//     threads = 4
//     outputFormats = ['XML', 'HTML']
//     timestampedReports = false
//     withHistory = true
//     // mutators = ['DEFAULTS', 'STRONGER', 'ALL']
//     mutators = ['DEFAULTS', 'STRONGER' ]
// }


bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

